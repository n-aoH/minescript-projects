#!python
import lib_hud
from system.pyj.minescript import *



config_scripts = ["mappings_downloader","reload_mappings","scannerv2 150","findplayers","ls2","getinfo"]

def on_press_key(event):
    global show

    if event.action == 0 and event.key == 301:  # F12
        lib_hud.show = False
        lib_hud.render_list = []
        for job in job_info():
            if job.self:
                execute(rf"\killjob {job.job_id}") #idk, I think it works?? Maybe memory leaks??? Idk at this point lol







add_event_listener("key", on_press_key)
add_event_listener("mouse", lib_hud.updateButtons)
add_event_listener("tick", lambda e: None)

ARGB = JavaClass("net.minecraft.util.ARGB")
Minecraft = JavaClass("net.minecraft.client.Minecraft")
mc = Minecraft.getInstance()






def testbutton(text):
    print(text)

def run_script(name):
    execute(rf"\{name}") #you should have a delay or input to start your pinned script, so this isn't that big of an issue that it's caled inside of a GUI

    

def onclick(name): #If you are using this for a button, place the script you want to execute in here.
    return lambda: run_script(name)
    


# To get the name of any screen, make a script that echos screen_name()

# %x, %y, px, py, justifyX, justifyY, width, height, text, text_color, button_color, click_callback, available_screens
maxsize = 0
for i in config_scripts:
    if mc.font.width(i) > maxsize:
        maxsize = mc.font.width(i)
count = 0 
for i in config_scripts: #to dynamically update these objects, simply overwrite the list every time you need to update it.
    #print(i)
    count += 1
    template = lib_hud.buttonObject(
        0,
        90,
        0,
        -count*5,
        -1,
        0,
        maxsize + 10,
        10,
        i,
        ARGB.color(255, 255, 255, 255),
        ARGB.color(200, 25, 25, 25),
        onclick(i), #Click Callback here
        ["Crafting", "Creative Inventory"]
    )
    lib_hud.render_list.append(template)


# text, color, %x, %y, px, py, justifyX, JustifyY, available_screens
template = lib_hud.textObject(
    "Quick Scripts",
    ARGB.color(255,255,255,255),
    0,
    90,
    int(maxsize/2),
    5,
    0,
    -1,
    ["Crafting", "Creative Inventory"]
)

lib_hud.render_list.append(template)
